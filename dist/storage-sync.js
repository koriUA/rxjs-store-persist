"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.syncStateUpdate = exports.rehydrateApplicationState = exports.storageSync = void 0;
const deepmerge = require("deepmerge");
const helpers_1 = require("./helpers");
const options_1 = require("./options");
const INIT_ACTION = '@ngrx/store/init';
const UPDATE_ACTION = '@ngrx/store/update-reducers';
function storageSync(reducer) {
    const stateKeys = (0, helpers_1.validateStateKeys)(options_1.config.keys);
    const rehydratedState = (0, exports.rehydrateApplicationState)(stateKeys, options_1.config.storage);
    return function (state, action) {
        let nextState;
        if ((action.type === INIT_ACTION) && !state) {
            nextState = reducer(state, action);
        }
        else {
            nextState = Object.assign({}, state);
        }
        if (action.type === INIT_ACTION || action.type === UPDATE_ACTION) {
            // @ts-ignore
            const overwriteMerge = (destinationArray, sourceArray) => sourceArray;
            const options = {
                arrayMerge: overwriteMerge
            };
            nextState = deepmerge(nextState, rehydratedState, options);
        }
        nextState = reducer(nextState, action);
        if (action.type !== INIT_ACTION) {
            (0, exports.syncStateUpdate)(nextState, stateKeys, options_1.config.storage);
        }
        return nextState;
    };
}
exports.storageSync = storageSync;
const rehydrateApplicationState = (keys, storage) => {
    return keys.reduce((acc, curr) => {
        let key = curr;
        if (storage !== undefined) {
            let stateSlice = storage.getItem(key);
            if (stateSlice) {
                const isObjectRegex = new RegExp('{|\\[');
                let raw = stateSlice;
                if (stateSlice === 'null' || isObjectRegex.test(stateSlice.charAt(0))) {
                    raw = JSON.parse(stateSlice);
                }
                return Object.assign({}, acc, {
                    [key]: raw
                });
            }
        }
        return acc;
    }, {});
};
exports.rehydrateApplicationState = rehydrateApplicationState;
const syncStateUpdate = (state, keys, storage) => {
    keys.forEach(key => {
        let stateSlice = state[key];
        let replacer = undefined;
        let space = undefined;
        if (typeof stateSlice !== 'undefined' && storage !== undefined) {
            try {
                storage.setItem(key, typeof stateSlice === 'string'
                    ? stateSlice
                    : JSON.stringify(stateSlice, replacer, space));
            }
            catch (e) {
                console.warn('Unable to save state to localStorage:', e);
            }
        }
        else if (typeof stateSlice === 'undefined') {
            try {
                storage.removeItem(key);
            }
            catch (e) {
                console.warn(`Exception on removing/cleaning undefined '${key}' state`, e);
            }
        }
    });
};
exports.syncStateUpdate = syncStateUpdate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZS1zeW5jLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3N0b3JhZ2Utc3luYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx1Q0FBdUM7QUFDdkMsdUNBQTRDO0FBQzVDLHVDQUFpQztBQUVqQyxNQUFNLFdBQVcsR0FBRyxrQkFBa0IsQ0FBQztBQUN2QyxNQUFNLGFBQWEsR0FBRyw2QkFBNkIsQ0FBQztBQUVwRCxTQUFnQixXQUFXLENBQUMsT0FBWTtJQUNwQyxNQUFNLFNBQVMsR0FBRyxJQUFBLDJCQUFpQixFQUFDLGdCQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakQsTUFBTSxlQUFlLEdBQUcsSUFBQSxpQ0FBeUIsRUFBQyxTQUFTLEVBQUUsZ0JBQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUU3RSxPQUFPLFVBQVUsS0FBVSxFQUFFLE1BQVc7UUFDcEMsSUFBSSxTQUFTLENBQUM7UUFFZCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUN6QyxTQUFTLEdBQUcsT0FBTyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztTQUN0QzthQUFNO1lBQ0gsU0FBUyxxQkFBTyxLQUFLLENBQUMsQ0FBQztTQUMxQjtRQUNELElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxXQUFXLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxhQUFhLEVBQUU7WUFDOUQsYUFBYTtZQUNiLE1BQU0sY0FBYyxHQUFHLENBQUMsZ0JBQXFCLEVBQUUsV0FBZ0IsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDO1lBQ2hGLE1BQU0sT0FBTyxHQUFzQjtnQkFDL0IsVUFBVSxFQUFFLGNBQWM7YUFDN0IsQ0FBQztZQUNGLFNBQVMsR0FBRyxTQUFTLENBQUMsU0FBUyxFQUFFLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUM5RDtRQUVELFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRXZDLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxXQUFXLEVBQUU7WUFDN0IsSUFBQSx1QkFBZSxFQUNYLFNBQVMsRUFDVCxTQUFTLEVBQ1QsZ0JBQU0sQ0FBQyxPQUFPLENBQ2pCLENBQUM7U0FDTDtRQUVELE9BQU8sU0FBUyxDQUFDO0lBQ3JCLENBQUMsQ0FBQztBQUNOLENBQUM7QUFqQ0Qsa0NBaUNDO0FBRU0sTUFBTSx5QkFBeUIsR0FBRyxDQUNyQyxJQUFXLEVBQ1gsT0FBZ0IsRUFDbEIsRUFBRTtJQUNBLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRTtRQUM3QixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUM7UUFFZixJQUFJLE9BQU8sS0FBSyxTQUFTLEVBQUU7WUFDdkIsSUFBSSxVQUFVLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN0QyxJQUFJLFVBQVUsRUFBRTtnQkFDWixNQUFNLGFBQWEsR0FBRyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDMUMsSUFBSSxHQUFHLEdBQUcsVUFBVSxDQUFDO2dCQUVyQixJQUFJLFVBQVUsS0FBSyxNQUFNLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ25FLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2lCQUNoQztnQkFFRCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRTtvQkFDMUIsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHO2lCQUNiLENBQUMsQ0FBQzthQUNOO1NBQ0o7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNYLENBQUMsQ0FBQztBQXhCVyxRQUFBLHlCQUF5Qiw2QkF3QnBDO0FBRUssTUFBTSxlQUFlLEdBQUcsQ0FDM0IsS0FBVSxFQUNWLElBQVcsRUFDWCxPQUFnQixFQUNsQixFQUFFO0lBQ0EsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNmLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM1QixJQUFJLFFBQVEsR0FBRyxTQUFTLENBQUM7UUFDekIsSUFBSSxLQUFLLEdBQUcsU0FBUyxDQUFDO1FBRXRCLElBQUksT0FBTyxVQUFVLEtBQUssV0FBVyxJQUFJLE9BQU8sS0FBSyxTQUFTLEVBQUU7WUFDNUQsSUFBSTtnQkFDQSxPQUFPLENBQUMsT0FBTyxDQUNYLEdBQUcsRUFDSCxPQUFPLFVBQVUsS0FBSyxRQUFRO29CQUMxQixDQUFDLENBQUMsVUFBVTtvQkFDWixDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUNwRCxDQUFDO2FBQ0w7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDUixPQUFPLENBQUMsSUFBSSxDQUFDLHVDQUF1QyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQzVEO1NBQ0o7YUFBTSxJQUFJLE9BQU8sVUFBVSxLQUFLLFdBQVcsRUFBRTtZQUMxQyxJQUFJO2dCQUNBLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDM0I7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDUixPQUFPLENBQUMsSUFBSSxDQUNSLDZDQUE2QyxHQUFHLFNBQVMsRUFDekQsQ0FBQyxDQUNKLENBQUM7YUFDTDtTQUNKO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUM7QUFoQ1csUUFBQSxlQUFlLG1CQWdDMUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBkZWVwbWVyZ2UgZnJvbSBcImRlZXBtZXJnZVwiO1xyXG5pbXBvcnQge3ZhbGlkYXRlU3RhdGVLZXlzfSBmcm9tIFwiLi9oZWxwZXJzXCI7XHJcbmltcG9ydCB7Y29uZmlnfSBmcm9tIFwiLi9vcHRpb25zXCI7XHJcblxyXG5jb25zdCBJTklUX0FDVElPTiA9ICdAbmdyeC9zdG9yZS9pbml0JztcclxuY29uc3QgVVBEQVRFX0FDVElPTiA9ICdAbmdyeC9zdG9yZS91cGRhdGUtcmVkdWNlcnMnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHN0b3JhZ2VTeW5jKHJlZHVjZXI6IGFueSkge1xyXG4gICAgY29uc3Qgc3RhdGVLZXlzID0gdmFsaWRhdGVTdGF0ZUtleXMoY29uZmlnLmtleXMpO1xyXG4gICAgY29uc3QgcmVoeWRyYXRlZFN0YXRlID0gcmVoeWRyYXRlQXBwbGljYXRpb25TdGF0ZShzdGF0ZUtleXMsIGNvbmZpZy5zdG9yYWdlKTtcclxuXHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0YXRlOiBhbnksIGFjdGlvbjogYW55KSB7XHJcbiAgICAgICAgbGV0IG5leHRTdGF0ZTtcclxuXHJcbiAgICAgICAgaWYgKChhY3Rpb24udHlwZSA9PT0gSU5JVF9BQ1RJT04pICYmICFzdGF0ZSkge1xyXG4gICAgICAgICAgICBuZXh0U3RhdGUgPSByZWR1Y2VyKHN0YXRlLCBhY3Rpb24pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG5leHRTdGF0ZSA9IHsuLi5zdGF0ZX07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gSU5JVF9BQ1RJT04gfHwgYWN0aW9uLnR5cGUgPT09IFVQREFURV9BQ1RJT04pIHtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBjb25zdCBvdmVyd3JpdGVNZXJnZSA9IChkZXN0aW5hdGlvbkFycmF5OiBhbnksIHNvdXJjZUFycmF5OiBhbnkpID0+IHNvdXJjZUFycmF5O1xyXG4gICAgICAgICAgICBjb25zdCBvcHRpb25zOiBkZWVwbWVyZ2UuT3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgICAgIGFycmF5TWVyZ2U6IG92ZXJ3cml0ZU1lcmdlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIG5leHRTdGF0ZSA9IGRlZXBtZXJnZShuZXh0U3RhdGUsIHJlaHlkcmF0ZWRTdGF0ZSwgb3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBuZXh0U3RhdGUgPSByZWR1Y2VyKG5leHRTdGF0ZSwgYWN0aW9uKTtcclxuXHJcbiAgICAgICAgaWYgKGFjdGlvbi50eXBlICE9PSBJTklUX0FDVElPTikge1xyXG4gICAgICAgICAgICBzeW5jU3RhdGVVcGRhdGUoXHJcbiAgICAgICAgICAgICAgICBuZXh0U3RhdGUsXHJcbiAgICAgICAgICAgICAgICBzdGF0ZUtleXMsXHJcbiAgICAgICAgICAgICAgICBjb25maWcuc3RvcmFnZVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5leHRTdGF0ZTtcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCByZWh5ZHJhdGVBcHBsaWNhdGlvblN0YXRlID0gKFxyXG4gICAga2V5czogYW55W10sXHJcbiAgICBzdG9yYWdlOiBTdG9yYWdlXHJcbikgPT4ge1xyXG4gICAgcmV0dXJuIGtleXMucmVkdWNlKChhY2MsIGN1cnIpID0+IHtcclxuICAgICAgICBsZXQga2V5ID0gY3VycjtcclxuXHJcbiAgICAgICAgaWYgKHN0b3JhZ2UgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBsZXQgc3RhdGVTbGljZSA9IHN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xyXG4gICAgICAgICAgICBpZiAoc3RhdGVTbGljZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNPYmplY3RSZWdleCA9IG5ldyBSZWdFeHAoJ3t8XFxcXFsnKTtcclxuICAgICAgICAgICAgICAgIGxldCByYXcgPSBzdGF0ZVNsaWNlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZVNsaWNlID09PSAnbnVsbCcgfHwgaXNPYmplY3RSZWdleC50ZXN0KHN0YXRlU2xpY2UuY2hhckF0KDApKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJhdyA9IEpTT04ucGFyc2Uoc3RhdGVTbGljZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGFjYywge1xyXG4gICAgICAgICAgICAgICAgICAgIFtrZXldOiByYXdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhY2M7XHJcbiAgICB9LCB7fSk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3Qgc3luY1N0YXRlVXBkYXRlID0gKFxyXG4gICAgc3RhdGU6IGFueSxcclxuICAgIGtleXM6IGFueVtdLFxyXG4gICAgc3RvcmFnZTogU3RvcmFnZVxyXG4pID0+IHtcclxuICAgIGtleXMuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgIGxldCBzdGF0ZVNsaWNlID0gc3RhdGVba2V5XTtcclxuICAgICAgICBsZXQgcmVwbGFjZXIgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgbGV0IHNwYWNlID0gdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHN0YXRlU2xpY2UgIT09ICd1bmRlZmluZWQnICYmIHN0b3JhZ2UgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgc3RvcmFnZS5zZXRJdGVtKFxyXG4gICAgICAgICAgICAgICAgICAgIGtleSxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlb2Ygc3RhdGVTbGljZSA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBzdGF0ZVNsaWNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogSlNPTi5zdHJpbmdpZnkoc3RhdGVTbGljZSwgcmVwbGFjZXIsIHNwYWNlKVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdVbmFibGUgdG8gc2F2ZSBzdGF0ZSB0byBsb2NhbFN0b3JhZ2U6JywgZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzdGF0ZVNsaWNlID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgc3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICAgICAgICAgICAgICBgRXhjZXB0aW9uIG9uIHJlbW92aW5nL2NsZWFuaW5nIHVuZGVmaW5lZCAnJHtrZXl9JyBzdGF0ZWAsXHJcbiAgICAgICAgICAgICAgICAgICAgZVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59O1xyXG4iXX0=
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.storageSyncMetaReducer = exports.getAllDataFromLocalForage = void 0;
const localForage = require("localforage");
const middleware_storage_1 = require("./middleware-storage");
const options_1 = require("./options");
const storage_sync_1 = require("./storage-sync");
const getAllDataFromLocalForage = (options) => {
    options_1.config.keys = options.keys;
    options_1.config.storage = middleware_storage_1.middlewareStorage;
    localForage.config({
        driver: options.driver || localForage.LOCALSTORAGE,
        name: 'NGRX Storage',
        version: 1.0,
        size: 4980736,
        storeName: 'keyvaluepairs',
        description: 'NGRX storage persist'
    });
    return localForage.keys()
        .then(keys => {
        return Promise.all(keys.map((key) => localForage.getItem(key).then(data => [key, data])));
    })
        .then(dataWithKeys => {
        const dataStorage = dataWithKeys.reduce((previousValue, [key, data]) => {
            previousValue[key] = data;
            return previousValue;
        }, {});
        middleware_storage_1.middlewareStorage.dataStorage = dataStorage;
        return dataStorage;
    });
};
exports.getAllDataFromLocalForage = getAllDataFromLocalForage;
function storageSyncMetaReducer(reducer) {
    return (0, storage_sync_1.storageSync)(reducer);
}
exports.storageSyncMetaReducer = storageSyncMetaReducer;
exports.default = localForage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMkNBQTJDO0FBQzNDLDZEQUF1RDtBQUN2RCx1Q0FBZ0Q7QUFDaEQsaURBQTJDO0FBRXBDLE1BQU0seUJBQXlCLEdBQUcsQ0FBQyxPQUFzQixFQUFFLEVBQUU7SUFDbEUsZ0JBQU0sQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztJQUMzQixnQkFBTSxDQUFDLE9BQU8sR0FBRyxzQ0FBaUIsQ0FBQztJQUNuQyxXQUFXLENBQUMsTUFBTSxDQUFDO1FBQ2pCLE1BQU0sRUFBUSxPQUFPLENBQUMsTUFBTSxJQUFJLFdBQVcsQ0FBQyxZQUFZO1FBQ3hELElBQUksRUFBVSxjQUFjO1FBQzVCLE9BQU8sRUFBTyxHQUFHO1FBQ2pCLElBQUksRUFBVSxPQUFPO1FBQ3JCLFNBQVMsRUFBSyxlQUFlO1FBQzdCLFdBQVcsRUFBRyxzQkFBc0I7S0FDckMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxXQUFXLENBQUMsSUFBSSxFQUFFO1NBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNYLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FDaEIsSUFBSSxDQUFDLEdBQUcsQ0FDTixDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUM1RCxDQUNGLENBQUM7SUFDSixDQUFDLENBQUM7U0FDRCxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUU7UUFDbkIsTUFBTSxXQUFXLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGFBQWtCLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUMxRSxhQUFhLENBQVMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO1lBQ2xDLE9BQU8sYUFBYSxDQUFDO1FBQ3ZCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNQLHNDQUFpQixDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDNUMsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUM7QUE1QlcsUUFBQSx5QkFBeUIsNkJBNEJwQztBQUVGLFNBQWdCLHNCQUFzQixDQUNsQyxPQUFZO0lBRWQsT0FBTyxJQUFBLDBCQUFXLEVBQUMsT0FBTyxDQUFDLENBQUM7QUFDOUIsQ0FBQztBQUpELHdEQUlDO0FBRUQsa0JBQWUsV0FBVyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgbG9jYWxGb3JhZ2UgZnJvbSAnbG9jYWxmb3JhZ2UnO1xuaW1wb3J0IHttaWRkbGV3YXJlU3RvcmFnZX0gZnJvbSBcIi4vbWlkZGxld2FyZS1zdG9yYWdlXCI7XG5pbXBvcnQge2NvbmZpZywgU3RvcmFnZUNvbmZpZ30gZnJvbSBcIi4vb3B0aW9uc1wiO1xuaW1wb3J0IHtzdG9yYWdlU3luY30gZnJvbSBcIi4vc3RvcmFnZS1zeW5jXCI7XG5cbmV4cG9ydCBjb25zdCBnZXRBbGxEYXRhRnJvbUxvY2FsRm9yYWdlID0gKG9wdGlvbnM6IFN0b3JhZ2VDb25maWcpID0+IHtcbiAgY29uZmlnLmtleXMgPSBvcHRpb25zLmtleXM7XG4gIGNvbmZpZy5zdG9yYWdlID0gbWlkZGxld2FyZVN0b3JhZ2U7XG4gIGxvY2FsRm9yYWdlLmNvbmZpZyh7XG4gICAgZHJpdmVyICAgICAgOiBvcHRpb25zLmRyaXZlciB8fCBsb2NhbEZvcmFnZS5MT0NBTFNUT1JBR0UsXG4gICAgbmFtZSAgICAgICAgOiAnTkdSWCBTdG9yYWdlJyxcbiAgICB2ZXJzaW9uICAgICA6IDEuMCxcbiAgICBzaXplICAgICAgICA6IDQ5ODA3MzYsXG4gICAgc3RvcmVOYW1lICAgOiAna2V5dmFsdWVwYWlycycsXG4gICAgZGVzY3JpcHRpb24gOiAnTkdSWCBzdG9yYWdlIHBlcnNpc3QnXG4gIH0pO1xuXG4gIHJldHVybiBsb2NhbEZvcmFnZS5rZXlzKClcbiAgICAudGhlbihrZXlzID0+IHtcbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChcbiAgICAgICAga2V5cy5tYXAoXG4gICAgICAgICAgKGtleSkgPT4gbG9jYWxGb3JhZ2UuZ2V0SXRlbShrZXkpLnRoZW4oZGF0YSA9PiBba2V5LCBkYXRhXSlcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9KVxuICAgIC50aGVuKGRhdGFXaXRoS2V5cyA9PiB7XG4gICAgICBjb25zdCBkYXRhU3RvcmFnZSA9IGRhdGFXaXRoS2V5cy5yZWR1Y2UoKHByZXZpb3VzVmFsdWU6IGFueSwgW2tleSwgZGF0YV0pID0+IHtcbiAgICAgICAgcHJldmlvdXNWYWx1ZVs8c3RyaW5nPmtleV0gPSBkYXRhO1xuICAgICAgICByZXR1cm4gcHJldmlvdXNWYWx1ZTtcbiAgICAgIH0sIHt9KTtcbiAgICAgIG1pZGRsZXdhcmVTdG9yYWdlLmRhdGFTdG9yYWdlID0gZGF0YVN0b3JhZ2U7XG4gICAgICByZXR1cm4gZGF0YVN0b3JhZ2U7XG4gICAgfSk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gc3RvcmFnZVN5bmNNZXRhUmVkdWNlcihcbiAgICByZWR1Y2VyOiBhbnlcbik6IGFueSB7XG4gIHJldHVybiBzdG9yYWdlU3luYyhyZWR1Y2VyKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxGb3JhZ2U7XG4iXX0=